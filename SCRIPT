#!/bin/bash
#
# Dit is een script gemaakt om te controleren of de server klaar is voor Docker & Kubernetes installatie.
# En deze ook te installeren.
# Dit is voor debuggen, geen updates, geen upgrades, en geen clears.
#
# In order to run this script top to bottom, without wanting to verify the settings
# You can use the following command: yes | sudo ./<script.sh>
#
# Prequisites:
# Zorg ervoor dat het IP correct staat - 192.168.1.67 
# en dat de updates & upgrades gebeurt zijn.
# Zet de SWAP uit!
#
# V1.16 - Arno De Keersmaeker
###########
# COLOURS #
green='\033[0;32m'
red='\033[0;31m'
nocolor='\033[0m'

##########DOCKER & COMPOSE##########

# Explanation #
# clear
#echo -e "${green}This script will install Docker & Kubernetes, with a custom docker-compose file.${nocolor}"
#echo -e "${green}And all of their needed prequisites and settings, to get a default set up.${nocolor}"
#read -p "$(echo -e $red"Press any key to continue."$nocolor)"
#clear
#echo -e "${green}Checking for and applying updates, this may take a while.${nocolor}"
#sleep 1
#sudo apt update -y
#sudo apt upgrade -y
#echo -e "${green}Done!${nocolor}"
#sleep 1
#echo
#clear
#echo -e "${green}Installing net-tools & adding needed directories...${nocolor}"
#echo -e "${green}These contain:${nocolor}"
#echo -e "${green}- /cloud/${nocolor}"
#echo -e "${green}- /webservice/filebrowser${nocolor}"
#echo -e "${green}-           ./etherpad${nocolor}"
#echo -e "${green}-           ./ethercalc${nocolor}"
#echo

#-----apt installs-----#
#sudo apt install -y net-tools

#-----Adding directories-----#
#sudo mkdir /cloud/						# Filebrowser data dir
#sudo mkdir /webservice/					# DOCKER COMPOSE LOCATION
#sudo mkdir /webservice/filebrowser/		# FILEBROWSER CONFIG
#sudo mkdir /webservice/etherpad/		# ETHERPAD CONFIG
#sudo mkdir /webservice/ethercalc		# ETHERCALC CONFIG

#echo -e "${green}Done!${nocolor}"
#sleep 1
#echo
#clear
#echo -e "${green}Installing Docker & Docker Compose... ${nocolor}"
#-----curl installs-----#
# Docker-engine
#curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg --yes
# Docker-Compose
#sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose

#-----repo adds-----#
# Docker-engine
#echo \
#  "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
#  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

#-----apt installs AFTER curl or repo-----#
# Docker-engine
#sudo apt-get update
#sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin

#-----extra config-----#
# Docker-Compose
#sudo chmod +x /usr/local/bin/docker-compose

#echo -e "${green}Done!${nocolor}"
#sleep 1
#echo
#-----Location info-----#
#clear
#echo -e "${green}Pulling docker-compose file from github into: ${nocolor}""[/webservice/docker-compose.yaml]"
#sleep 1

#-----Create the docker-compose file from my github:-----#
#cd /webservice/ || exit
#sudo curl https://raw.githubusercontent.com/akke023/server-setup/main/docker-compose.yaml?token=GHSAT0AAAAAABUKIMNODZIHRWQNDDELM4PIYUCIZDQ | sudo tee docker-compose.yml
#echo -e "${green}Done!${nocolor}"
#sleep 1
#echo

#-----Setting Permissions-----#
#echo -e "${green}Setting up permissions...${nocolor}"
#sleep 1
#sudo touch /webservice/filebrowser/filebrowser.db
#sudo chown www-data:www-data /webservice/filebrowser/filebrowser.db
#sudo chown www-data:www-data /cloud/
#echo -e "${green}Done!${nocolor}"
#sleep 1
#echo
#-----Docker-compose info-----#
#clear
#echo -e "${green}Creating the containers...${nocolor}"
#sleep 1

#-----Apply docker-compose file:-----#
#sudo docker-compose up -d --force-recreate
#echo -e "${green}Done!${nocolor}"
#sleep 1
#echo
#-----Post-Install Info-----#
#clear
#echo -e "${green}Currently installed Ubuntu version:${nocolor}"
#lsb_release -r
#echo
#echo -e "${green}Currently installed docker version:${nocolor}"
#docker -v
#echo
#echo -e "${green}Currently installed docker-compose version:${nocolor}"
#docker-compose -v
#echo
#echo -e "${green}Any remaining updates?${nocolor}"
#/usr/lib/update-notifier/apt-check --human-readable
#echo
#read -p "$(echo -e $red"Press any key to view docker processes."$nocolor)"
#clear
#sudo docker ps
######## TEST: docker -v & docker-compose -v #######

########KUBERNETES CORE 1/3#######
echo -e "${green}Do you also want to install Kubernetes? [Y/N]${nocolor}"
read answer1
if [ "$answer1" = Y ] || [ "$answer1" = y ]
then
		#-----Kubernetes Core-Tools-----#
		clear
		echo -e "${green}Installing Core-Tools...${nocolor}"
		sleep 1
		sudo apt -y install curl apt-transport-https
		curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
		echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
		#-----Kubernetes Repo's & packages-----#
		sudo apt update
		sudo apt -y install vim git curl wget kubelet kubeadm kubectl
		sudo apt-mark hold kubelet kubeadm kubectl
		echo -e "${green}Instalation complete!${nocolor}"
		sleep 2
		#-----Status-Check-----#
		clear
		echo -e "${green}Currently installed kubectl & kubeadm versions:${nocolor}"
		kubectl version --client && kubeadm version
		read -p "$(echo -e $red"Press any key to continue. Press [CTRL+C] if the instalation has failed."$nocolor)"	
fi	
if [ "$answer1" = N ] || [ "$answer1" = n ]
then
        echo -e "${red}Cancelling the instalation,""${green} enjoy Docker!.${nocolor}"
		exit 1
fi
## TEST: kubectl version --client && kubeadm version ##

#########KUBERNETES CORE 2/3#########
#-----Turn-off Swap-----#
echo -e "${green}Configuring swaps, kernels & sysconfigs...${nocolor}"
sudo sed -i '12 s/^/#/' /etc/fstab
sudo swapoff -a
#-----Enable Kernel Modules-----#
sudo modprobe overlay
sudo modprobe br_netfilter
#-----Add settings in sysctl config-----#
sudo tee /etc/sysctl.d/kubernetes.conf<<EOF
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
net.ipv4.ip_forward = 1
EOF
#-----Finishing up the pre-install-----#
sudo sysctl --system
#-----Installing Container-Runtime-----#
echo -e "${green}Done!${nocolor}"
sleep 1
echo
clear
echo -e "${green}Installing Container-Runtime...${nocolor}"
sleep 1
sudo apt update
sudo apt install -y curl gnupg2 software-properties-common apt-transport-https ca-certificates
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
echo -e "${green}Done!${nocolor}"
sleep 1
echo
#------Installing Docker & Containerd-----#
echo -e "${green}Installing Docker & Containerd...${nocolor}"
sudo apt update
sudo apt install -y containerd.io docker-ce docker-ce-cli
#-----Making directories------#
sudo mkdir -p /etc/systemd/system/docker.service.d
#-----Make custom daemon json config file-----#
sudo tee /etc/docker/daemon.json <<EOF
{
  "exec-opts": ["native.cgroupdriver=systemd"],
  "log-driver": "json-file",
  "log-opts": {
    "max-size": "100m"
  },
  "storage-driver": "overlay2"
}
EOF
echo -e "${green}Done!${nocolor}"
sleep 1
echo
#-----Start & Enable all new services-----#
echo -e "${green}Creating Services...${nocolor}"
sleep 3
sudo systemctl daemon-reload 
sudo systemctl restart docker
sudo systemctl enable docker
echo -e "${green}Done!${nocolor}"
sleep 1
echo
clear
echo -e "${green}Install complete!${nocolor}"

############ TEST USING: containderd -v #############

###########KUBERNETES 3/3############
echo -e "${green}Is this a Master or a slave? [M/S]${nocolor}"
		read answer3
		if [ "$answer3" = Y ] || [ "$answer3" = y ] || [ "$answer3" = M ] || [ "$answer3" = m ] || [ "$answer3" = Master ] || [ "$answer3" = master ] || [ "$answer3" = MASTER ]
		then
			#ASK IP FOR CONFIG?#
			echo -e "${green}Please enter the MASTER IP:${nocolor}"
			read = master_ip
			###
			
			echo -e "${green}Setting up MASTER...${nocolor}"
			echo
			sleep 1
			#-----Configure MASTER-----#
			lsmod | grep br_netfilter
			echo -e "${green}Starting up kubelet...${nocolor}"
			kubeadm init phase kubelet-start
			sudo systemctl enable kubelet
			echo -e "${green}Done!${nocolor}"
			sleep 1
			echo
			#-----Error Fix - Just in case-----#
			echo -e "${green}Fixing some problems...${nocolor}"
			sudo chown user:user /etc/containerd/config.toml
			sudo mkdir -p /etc/containerd && containerd config default > /etc/containerd/config.toml
			sudo chown root:root /etc/containerd/config.toml
			sudo systemctl restart containerd
			echo -e "${green}Done!${nocolor}"
			sleep 1
			echo
			echo -e "${green}Pulling images...${nocolor}"
			sudo kubeadm config images pull
			sudo hostnamectl set-hostname kmaster
			sudo tee -a /etc/hosts <<EOF
localhost       kmaster
EOF
			echo -e "${green}Done!${nocolor}"
			sleep 1
			echo
			#-----Adding Pod Network; According to CALICO-----#
			echo -e "${green}Starting the cluster using CALICO...${nocolor}"
			sudo kubeadm init --pod-network-cidr=10.10.0.0/16
    			echo -e "${green}Done!${nocolor}"
			sleep 1
			echo
			#-----Finalising...-----#
			echo -e "${green}Finalising...${nocolor}"
			mkdir -p $HOME/.kube
			sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
			sudo chown $(id -u):$(id -g) $HOME/.kube/config
			#-----Status-Check-----#
			clear
			echo -e "${green}Kubernetes-Cluster info:${nocolor}"
			kubectl cluster-info
			read -p "$(echo -e $red"Press any key to continue. Press [CTRL+C] if the instalation has failed."$nocolor)"	
			#-----Just in Case-----#
			sudo mkdir /webservice/
			#-----Configuring CALICO-----#
			cd /webservice/ || exit
			curl https://raw.githubusercontent.com/akke023/server-setup/main/calico.yaml -O
			kubectl apply -f calico.yaml
			# This one always taints:
			sudo kubectl taint node kmaster node-role.kubernetes.io/master:NoSchedule-
			sudo kubectl taint node kmaster node-role.kubernetes.io/control-plane:NoSchedule-
			#-----Installing Dashboard-----#
			curl https://raw.githubusercontent.com/akke023/server-setup/main/kubernetes-dashboard-deployment.yml -o kubernetes-dashboard.yml
			sudo kubectl apply -f kubernetes-dashboard.yml
			#-----Installing Kube-Admin-----#
			curl https://raw.githubusercontent.com/akke023/server-setup/main/admin-user.yml -o dashboard-admin-user.yml
			sudo kubectl apply -f dashboard-admin-user.yml
			#-----Configuring File-browser-----#
			sudo mkdir /webservice/filebrowser/
			sudo touch /webservice/filebrower/database.db
			#-----Pulling Pods....-----#
			curl https://raw.githubusercontent.com/akke023/server-setup/main/pods-FULL2.yaml -o pods-FULL.yaml
			curl https://raw.githubusercontent.com/akke023/server-setup/main/pv-full.yaml -o pv-FULL.yaml
			curl https://raw.githubusercontent.com/akke023/server-setup/main/StorageClasses.yaml -o storageclasses.yaml
			curl https://raw.githubusercontent.com/akke023/server-setup/main/pvc-full.yaml -o pvc-FULL.yaml
			#-----Installing Pods....-----#
			sudo kubectl apply -f storageclasses.yaml
			sudo kubectl apply -f pv-FULL.yaml
			sudo kubectl apply -f pvc-FULL.yaml
			sudo kubectl apply -f pods-FULL.yaml
			#-----Finishing up....------#
			clear
			echo -e "${green}Currently running pods:${nocolor}"
			kubectl get pods --all-namespaces
			echo -e "${green}If you see this, your MASTER is WORKING!${nocolor}"
			echo -e "${green}To watch your pods use:${nocolor}"" [sudo kubectl get pods --all-namespaces]"		
			echo -e "${green}To add a slave machine use token:${nocolor}"
			kubeadm token create --print-join-command
			echo -e "${green}To start Kubernetes Dashboard in the background use:${nocolor}"" [sudo kubectl proxy --address='0.0.0.0' --accept-hosts='.*' &] and [bg] or [fg] to bring it back."	
			echo -e "${green}Dashboard NodePort:${nocolor}"
			kubectl get service -n kubernetes-dashboard
			echo -e "${green}Admin Dashboard Token:${nocolor}"
			kubectl -n kubernetes-dashboard create token admin-user	

	
		fi
		########## ADD THE SLAVE!!!#########
		if [ "$answer3" = N ] || [ "$answer3" = n ] || [ "$answer3" = S ] || [ "$answer3" = s ] || [ "$answer3" = Slave ] || [ "$answer3" = slave ] || [ "$answer3" = SLAVE ]
		then
			echo -e "${green}Setting up SLAVE...${nocolor}"
						sudo tee -a /etc/hosts <<EOF
192.168.1.67       kmaster
EOF
			clear
			rm /etc/containerd/config.toml
			echo -e "${green}In order for the slave to join the master, please execute the command shown at the end of the MASTER instalation.${nocolor}"
			echo -e "${green}If no join command was given please enter the following into the MASTER:${nocolor}"
			echo "sudo kubeadm token create --print-join-command"
# Unimplemented desc = unknown service runtime.v1alpha2.RuntimeService"
# -> rm /etc/containerd/config.toml, retry the join code.
fi
########### TEST: kubectl cluster-info ###########


